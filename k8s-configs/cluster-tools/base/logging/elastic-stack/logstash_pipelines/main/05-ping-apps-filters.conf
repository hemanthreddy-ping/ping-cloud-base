filter {
  if ([log_type] == "ping-apps") {
    if ([log] =~ /^\/opt\/out\/instance(\/\w+)?\/log[s]?/) {
      grok {
        match => {
          "log" => [ "^\/opt\/out\/instance(\/\w+)?\/log[s]?\/%{DATA:log_name}(\.log)? %{GREEDYDATA:message}" ]
        }
      }
      mutate {
        gsub => [ "message", "\\n", "\n" ]
        gsub => [ "message", "\/opt\/out\/instance(\/\w+)?\/log[s]?\/\w+(\.log)?", ""]
        remove_field => "[log]"
        replace => { "log_type" => "ping_app_logs" }
      }

      if ([kubernetes][container_name] =~ "pingaccess(-was)?(-admin)?") {
        if ([log_name] == "pingaccess_engine_audit") {
          grok {
            match => {
              "message" => [ "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:trackingId}\| %{DATA:exchangeId}\| %{NUMBER:roundTripMS} ms\| %{NUMBER:proxyRoundTripMS} ms\| %{DATA:resource}\| %{DATA:subject}\| %{DATA:authMech}\| %{IP:clientIP}\| %{WORD:method}\| %{DATA:requestUri}\| %{NUMBER:responseCode}\| %{DATA:failedRuleType}\| %{DATA:failedRuleName}\| %{DATA:applicationName}\| %{GREEDYDATA:resourceName}\| %{URIPATHPARAM:request}" ]
            }
            remove_field => ["message"]
          }
        }
        if ([log_name] == "pingaccess_api_audit") {
          grok {
            match => {
              "message" => [ "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:trackingId}\| %{DATA:exchangeId}\| %{NUMBER:roundTripMS} ms\| %{WORD:subject}\| %{WORD:authMech}\| %{IP:clientIP}\| %{WORD:method}\| %{GREEDYDATA:requestUri}\| %{NUMBER:responseCode}" ]
            }
            remove_field => ["message"]
          }
        }
        if ([log_name] == "pingaccess_agent_audit") {
          grok {
            match => {
              "message" => [ "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:exchangeId}\| %{DATA:trackingId}\| %{NUMBER:roundTripMS} ms\| %{DATA:resource}\| %{IP:client}\| %{WORD:method}\| %{DATA:RequestUri}\| %{NUMBER:responseCode}\| %{DATA:applicationName}\| %{DATA:resourceName}\| %{DATA:pathPrefix}" ]
            }
            remove_field => ["message"]
          }
        }
        if ([log_name] == "pingaccess_sideband_client_audit") {
          grok {
            match => {
              "message" => [ "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:exchangeId}\| %{DATA:trackingId}\| %{NUMBER:roundTripMS} ms\| %{IP:client}\| %{WORD:method}\| %{DATA:RequestUri}\| %{NUMBER:responseCode}\| %{DATA:sidebandName}\| %{DATA:sidebandDecision}" ]
            }
            remove_field => ["message"]
          }
        }
        if ([log_name] == "pingaccess_sideband_audit") {
          grok {
            match => {
              "message" => [ "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:exchangeId}\| %{DATA:trackingId}\| %{NUMBER:roundTripMS} ms\| %{DATA:resource}\| %{IP:client}\| %{WORD:method}\| %{DATA:RequestUri}\| %{NUMBER:responseCode}\| %{DATA:applicationName}\| %{DATA:resourceName}\| %{DATA:pathPrefix}\| %{DATA:sidebandName}" ]
            }
            remove_field => ["message"]
          }
        }
        if ([log_name] == "pingaccess") {
          grok {
            match => {
              "message" => [ "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,2}%{WORD:logLevel} \[%{DATA:exchangeId}\] %{DATA:className} - %{GREEDYDATA:message}" ]
            }
            overwrite => [ "message" ]
          }
        }
        if ([log_name] == "audit") {
          grok {
            match => {
              "message" => [ "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:message}"]
            }
            overwrite => [ "message" ]
          }
        }
        if ([log_name] == "upgrade") {
          grok {
            match => {
              "message" => [ "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,2}%{WORD:logLevel} %{GREEDYDATA:message}"]
            }
            overwrite => [ "message" ]
          }
        }
        if ([log_name] == "upgrade_status") {
          mutate {
            rename => { "log" => "message" }
          }
        }
        if ([timestamp]) {
          date {
            match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss"]
          }
        }
      } else if ([kubernetes][container_name] == "pingdirectory" or [kubernetes][container_name] == "pingdatasync") {
        kv {
          source => "[message]"
          value_split => "="
        }
        if ([log_name] == "errors" or [log_name] == "replication" or [log_name] == "server")  {
          grok {
            match => { "message" => "\[%{GREEDYDATA:timestamp}\] %{GREEDYDATA}" }
            remove_field => ["message"]
          }
        }
        if ([log_name] == "failed-ops" or [log_name] == "expensive-write-ops" or [log_name] == "access") {
          grok {
            match => { "message" => "\[%{GREEDYDATA:timestamp}\] %{WORD:ldapType} (?<ldapExtraType>(\w+ )?)%{WORD}=%{GREEDYDATA}" }
            remove_field => ["message"]
          }
        }
        date {
          match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss.SSS Z"]
        }
        mutate{
          gsub => [ "filter", '"', "" ]
          gsub => [ "dn", '"', "" ]
          gsub => [ "requesterIP", "internal", "127.0.0.1" ]
        }
      } else if ([kubernetes][container_name] =~ "pingfederate(-admin)?") {
        if ([log_name] == "admin-api" or [log_name] == "runtime-api") {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:user}\| %{DATA:authType}\| %{IP:clientIP}\| %{WORD:httpMethod}\| %{DATA:url}\| %{NUMBER:status}"
            }
            remove_field => ["message"]
          }
        }
        if ([log_name] == "admin-event-detail") {
          grok {
            match => {
              "message" => "%{DATA:eventDetailId} \| %{DATA:filename} \| %{DATA:delta} \| %{DATA:positioon} \| %{GREEDYDATA:message}"
            }
            overwrite => [ "message" ]
          }
        }
        if ([log_name] == "admin") {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp} \| %{DATA:user} \| %{DATA:roles} \| %{IP:ip} \| %{DATA:component} \| %{DATA:event} \| %{DATA:eventDetailId} \| %{GREEDYDATA:message}"
            }
            overwrite => [ "message" ]
          }
        }
        if ([log_name] == "transaction") {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:message}"
            }
            overwrite => [ "message" ]
          }
        }
        if ([log_name] == "audit") {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:trackingId}\| %{DATA:event}\| %{DATA:subject}\| %{IP:ip} \| %{DATA:app}\| %{DATA:connectionId}\| %{DATA:protocol}\| %{IPORHOST:host}\| %{DATA:role}\| %{DATA:status}\| %{DATA:adapterId}\| %{DATA:description}\| %{NUMBER:responceTime}"
            }
            remove_field => ["message"]
          }
        }
        if ([log_name] == "provisioner-audit") {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp}\| %{DATA:cycleId}\| %{DATA:channelId}\| %{DATA:eventType}\| %{DATA:sourceId}\| %{DATA:targetId}\| %{DATA:isSuccess}\| %{DATA:nonSuccessCause}"
            }
            remove_field => ["message"]
          }
        }
        if ([log_name] == "server") {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp} %{DATA:trackingId}[ ]{1,2}%{WORD:logLevel} \[%{DATA:className}\] ${GREEDYDATA:message}"
            }
            overwrite => [ "message" ]
          }
        }
        if ([log_name] == "init") {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:message}"
            }
            overwrite => [ "message" ]
          }
        }
        if ([log_name] == "jvm-garbage-collection") {
          grok {
            match => {
              "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{DATA:secondsFromStart}s\]\[%{WORD:logLevel}\]\[%{DATA:categories}\] %{GREEDYDATA:message}"
            }
            overwrite => [ "message" ]
          }
        }
        if ([timestamp]) {
          date {
            match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss"]
          }
        }
      } else if ([kubernetes][container_name] == "pingcentral") {
        if ([log_name] == "application-ext" or [log_name] == "application") {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp}[ ]{1,3}%{WORD:logLevel}[ ]{1,3}%{DATA:className}:%{NUMBER:position} - %{GREEDYDATA:message}"
            }
            overwrite => [ "message" ]
          }
        }
        if ([log_name] == "monitor") {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp} \| %{DATA:className} %{GREEDYDATA:message}"
            }
            overwrite => [ "message" ]
          }
        }
        if ([log_name] == "application-api") {
          grok {
            match => {
              "message" => "%{TIMESTAMP_ISO8601:timestamp} \| %{DATA:className} %{WORD:user} \| %{WORD:method} \| %{IP:clientIP} \| %{DATA:requestUri} \| %{NUMBER:responseCode}"
            }
            remove_field => ["message"]
          }
        }
        if ([timestamp]) {
          date {
            match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss" ]
          }
        }
      } else if ([kubernetes][container_name] == "pingdelegator") {
        if ([log_name] == "access") {
          grok {
            match => {
              "message" => "%{IP:clientIp} - %{DATA:user} \[%{DATA:timestamp}\] \"%{WORD:method} %{DATA:url} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:bodySentBytes} \"%{DATA:referrer}\" \"%{DATA:userAgent}\" \"%{DATA:httpForwardedFor}\""
            }
            remove_field => ["message"]
          }
          date {
            match => [ "timestamp", "dd/MMM/yyyy:H:m:s Z" ]
          }
        }
        if ([log_name] == "error") {
          grok {
            match => {
              "message" => ["%{DATA:timestamp} \[%{DATA:logLevel}\] %{NUMBER:pid}#%{NUMBER:tid}: (\*%{NUMBER:connection_id} )?%{GREEDYDATA:message}"]
            }
            overwrite => [ "message" ]
          }
          date {
            match => [ "timestamp", "dd/MMM/yyyy:H:m:s Z" ]
          }
        }
      }
    }
    else {
      mutate {
        rename => { "log" => "message" }
      }
    }
  }
}